@using LMS.Blazor.Client.Services
@using LMS.Shared.DTOs.Create
@using LMS.Shared.DTOs.Read
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Authorization

<div class="col-lg-6 col-mb-6 col-sm-12">
    <div class="card mb-4">
        <div class="card-header">
            <div class="d-flex justify-content-between align-items-center">
                <h5 class="mb-0">Nuvarande kurs</h5>
                <a href="javascript:void(0)" @onclick="ShowFileModal" class="ml-auto">Filhantering</a>
            </div>
        </div>
        <div class="card-body">
            @* <p class="card-text"></p> *@
            <div class="table-responsive scrollable-container">
                <table class="table table-hover ">
                    <tbody>
                        <tr>
                            <th scope="row">@GetDisplayName(nameof(CourseData.Name))</th>
                            <td>@CourseData.Name</td>
                        </tr>
                        <tr>
                            <th scope="row">@GetDisplayName(nameof(CourseData.Description))</th>
                            <td>@CourseData.Description</td>
                        </tr>
                        <tr>
                            <th scope="row">@GetDisplayName(nameof(CourseData.StartDate))</th>
                            <td>@CourseData.StartDate</td>
                        </tr>
                        <tr>
                            <th scope="row">@GetDisplayName(nameof(CourseData.EndDate))</th>
                            <td>@CourseData.EndDate</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<div class="modal fade show" tabindex="-1" role="dialog" style="display:@(IsFileModalVisible ? "block" : "none");" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Filhantering</h5>
                <button type="button" class="close" aria-label="Close" @onclick="HideFileModal">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <h6>Filer</h6>
                <ul>
                    @if (userFiles != null && userFiles.Any())
                    {
                        @foreach (var file in userFiles)
                        {
                            <li>
                                @file.Name
                                <button class="btn btn-link" @onclick="() => DownloadFile(file.UserFileId)">Ladda ner</button>
                            </li>
                        }
                    }
                    else
                    {
                        <li>Filer saknas.</li>
                    }
                </ul>

                <h6>Ladda upp fil. (Max 10 MB)</h6>
                <InputFile OnChange="HandleFileUpload" MaxFileSize="10485760" />
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="HideFileModal">Stäng</button>
            </div>
        </div>
    </div>
</div>


<style>
    .card-body {
        display: flex;
        flex-direction: column;
        height: 250px; 
    }
    .scrollable-container {
        flex-grow: 1;
        overflow-y: auto; //Vertical scrolling
        border: 1px solid #ccc; 
        max-height: 100%;
    }

    .modal.fade.show {
        display: block;
        background: rgba(0, 0, 0, 0.5); /* Dim background */
    }
</style>

@code {
    [Inject]
    private IJSRuntime JSRuntime { get; set; }
    [Inject]
    private IApiService _apiService { get; set; } = default!;
    [Inject]
    private AuthenticationStateProvider AuthenticationStateProvider { get; set; } = default!;
    [Parameter]
    public CourseDto CourseData { get; set; } = new CourseDto();

    private bool IsFileModalVisible { get; set; } = false;
    private List<UserFileReadDto>? userFiles = new();

    private async void ShowFileModal()
    {
        IsFileModalVisible = true;
        try
        {
            userFiles = await _apiService.GetAsync<List<UserFileReadDto>>($"files/course/{CourseData.CourseId}");
            if (userFiles == null)
            {
                Console.Error.WriteLine("Files not found for the course.");
                userFiles = new List<UserFileReadDto>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching files: {ex.Message}");
        }
        StateHasChanged();

    }

    private void HideFileModal()
    {
        IsFileModalVisible = false;
    }

    private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file == null || file.Size == 0)
        {
            Console.Error.WriteLine("No file selected or file is empty.");
            return;
        }

        try
        {
            // Call the PostFileAsync method in the ClientApiService
            await _apiService.PostFileAsync(
                $"files/upload?courseId={CourseData.CourseId}",
                file);

            // Provide user feedback (e.g., toast or modal)
            ShowFileModal();
            Console.WriteLine("File uploaded successfully.");
        }
        catch (Exception ex)
        {
            // Handle upload errors (e.g., network issues, validation failures)
            Console.Error.WriteLine($"Error uploading file: {ex.Message}");
        }
    }

    // private async Task HandleFileUpload(InputFileChangeEventArgs e)
    // {
    //     var file = e.File;
    //     if (file != null)
    //     {
    //         var fileDto = new UserFileCreateDto
    //             {
    //                 Name = file.Name,
    //                 CourseId = CourseData.CourseId
    //             };

    //         var content = new MultipartFormDataContent();
    //         content.Add(new StreamContent(file.OpenReadStream(maxAllowedSize: 10_000_000)), "file", file.Name);
    //         content.Add(new StringContent(fileDto.CourseId.ToString()), "courseId");

    //         await _apiService.PostAsync("files/upload", content);

    //         ShowFileModal();
    //     }
    // }

    private async Task DownloadFile(Guid fileId)
    {
        try
        {
            // Fetch the file data from the API
            var response = await _apiService.GetFileAsync($"files/{fileId}");

            if (response.IsSuccessStatusCode)
            {
                var fileContent = await response.Content.ReadAsByteArrayAsync();
                var contentType = response.Content.Headers.ContentType?.ToString() ?? "application/octet-stream";
                var fileName = response.Content.Headers.ContentDisposition?.FileNameStar
                               ?? response.Content.Headers.ContentDisposition?.FileName?.Trim('"')
                               ?? "downloaded_file";

                // Use JavaScript Interop to trigger the file download
                await JSRuntime.InvokeVoidAsync("downloadFile", fileContent, fileName, contentType);
            }
            else
            {
                Console.Error.WriteLine("File not found or unable to download.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error downloading file: {ex.Message}");
        }
    }

    public string GetDisplayName(string propertyName)
    {
        var property = typeof(CourseDto).GetProperty(propertyName);
        if (property != null)
        {
            var displayAttribute = property.GetCustomAttributes(typeof(DisplayAttribute), true)
                                           .FirstOrDefault() as DisplayAttribute;
            if (displayAttribute != null)
            {
                return displayAttribute.Name;
            }
        }
        return propertyName; //If no DisplayAttribute is found, return the property name
    }

    // private async Task DownloadFile2(Guid fileId)
    // {
    //     try
    //     {
    //         // Fetch the file data from the API
    //         var response = await _apiService.GetFileAsync($"files/{fileId}");

    //         if (response.IsSuccessStatusCode)
    //         {
    //             var fileContent = await response.Content.ReadAsByteArrayAsync();
    //             var contentType = response.Content.Headers.ContentType?.ToString() ?? "application/octet-stream";
    //             var fileName = response.Content.Headers.ContentDisposition?.FileNameStar ?? response.Content.Headers.ContentDisposition?.FileName?.Trim('"') ?? "downloaded_file";
    //             // Convert byte[] to a base64 string for download
    //             var fileUrl = $"data:{contentType};base64,{Convert.ToBase64String(fileContent)}";

    //             // Use JavaScript Interop to trigger the file download

    //             try
    //             {
    //                 // Use JavaScript Interop to trigger the file download
    //                 await JSRuntime.InvokeVoidAsync("downloadFile", fileUrl, fileName);
    //             }
    //             catch (JSException jsEx)
    //             {
    //                 Console.Error.WriteLine($"JavaScript error: {jsEx.Message}");
    //                 // Optionally, display an error message to the user
    //             }
    //         }
    //         else
    //         {
    //             Console.Error.WriteLine("File not found or unable to download.");
    //         }
    //     }
    //     catch (Exception ex)
    //     {
    //         Console.WriteLine($"Error downloading file: {ex.Message}");
    //     }
    // }



    // private async Task DownloadFile(Guid fileId)
    // {
    //     try
    //     {
    //         // Fetch the file data from the API
    //         var response = await _apiService.GetAsync<HttpResponseMessage>($"files/{fileId}");

    //         if (response.IsSuccessStatusCode)
    //         {
    //             var fileContent = await response.Content.ReadAsByteArrayAsync();
    //             var contentType = response.Content.Headers.ContentType?.ToString() ?? "application/octet-stream";
    //             var fileName = response.Content.Headers.ContentDisposition?.FileName?.Trim('"') ?? "downloaded_file";

    //             // Convert byte[] to a base64 string for download
    //             var fileUrl = $"data:{contentType};base64,{Convert.ToBase64String(fileContent)}";

    //             // Use JavaScript Interop to trigger the file download
    //             await JSRuntime.InvokeVoidAsync("downloadFile", fileUrl, fileName);
    //         }
    //         else
    //         {
    //             Console.Error.WriteLine("File not found or unable to download.");
    //         }
    //     }
    //     catch (Exception ex)
    //     {
    //         Console.WriteLine($"Error downloading file: {ex.Message}");
    //     }
    // }


    // private async Task DownloadFile(Guid fileId)
    // {
    //     // Fetch the file data from the API
    //     // var (fileContent, contentType, fileName) = await _apiService.GetAsync<(byte[], string, string)>($"files/{fileId}");
    //     try 
    //     {
    //         var response = await _apiService.GetAsync<HttpResponseMessage>($"files/{fileId}");


    //         var fileContent = await response.Content.ReadAsByteArrayAsync();
    //         var contentType = response.Content.Headers.ContentType?.ToString() ?? "application/octet-stream";
    //         var fileName = response.Content.Headers.ContentDisposition?.FileName?.Trim('"') ?? "downloaded_file";
    //         var fileUrl = $"data:{contentType};base64,{Convert.ToBase64String(fileContent)}";
    //         await JSRuntime.InvokeVoidAsync("downloadFile", fileUrl, fileName);

    //     }

    //     // Use JavaScript Interop to trigger the file download

    //     // Ensure the file content is valid
    //     if (fileContent != null)
    //     {
    //         // Convert byte[] to a base64 string for download
    //         var fileUrl = $"data:{contentType};base64,{Convert.ToBase64String(fileContent)}";

    //         // Use JavaScript Interop to trigger the file download
    //         await JSRuntime.InvokeVoidAsync("downloadFile", fileUrl, fileName);
    //     }
    //     else
    //     {
    //         // Handle error when file is not found
    //         Console.Error.WriteLine("File not found or unable to download.");
    //     }
    // }

    // private async Task HandleFileUpload(InputFileChangeEventArgs e)
    // {
    //     var file = e.File;
    //     if (file != null)
    //     {
    //         // var fileContent = new byte[file.Size];
    //         // await file.OpenReadStream().ReadAsync(fileContent);
    //         var fileDto = new UserFileCreateDto
    //             {
    //                 Name = file.Name,
    //                 CourseId = CourseData.CourseId
    //             };

    //         var content = new MultipartFormDataContent();
    //         content.Add(new StreamContent(file.OpenReadStream(maxAllowedSize: 10_000_000)), "file", file.Name);
    //         content.Add(new StringContent(fileDto.CourseId.ToString()), "courseId");

    //         await _apiService.PostAsync("files/upload", content);

    //         ShowFileModal();
    //     }
    // }


    // private async Task DownloadFile(Guid fileId)
    // {
    //     var (fileContent, contentType, fileName) = await _apiService.GetAsync<(byte[], string, string)>($"files/download/{fileId}");

    //     using var stream = new MemoryStream(fileContent);
    //     using var fileStream = new FileStream(fileName, FileMode.Create);
    //     await stream.CopyToAsync(fileStream);

    //     // Trigger browser download
    //     var fileUrl = $"data:{contentType};base64,{Convert.ToBase64String(fileContent)}";
    //     await JSRuntime.InvokeVoidAsync("downloadFile", fileUrl, fileName);
    // }

    // public string GetDisplayName(string propertyName)
    // {
    //     var property = typeof(CourseDto).GetProperty(propertyName);
    //     if (property != null)
    //     {
    //         var displayAttribute = property.GetCustomAttributes(typeof(DisplayAttribute), true)
    //                                        .FirstOrDefault() as DisplayAttribute;
    //         if (displayAttribute != null)
    //         {
    //             return displayAttribute.Name;
    //         }
    //     }
    //     return propertyName; //If no DisplayAttribute is found, return the property name
    // }


    // private void HandleDocuments()
    // {
    //     // 
    // }


}
