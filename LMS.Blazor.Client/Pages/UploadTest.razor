@page "/uploadtest"
@rendermode InteractiveWebAssembly

@using LMS.Blazor.Client.Services
@using LMS.Shared.DTOs
@using LMS.Shared.DTOs.Read
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using LMS.Blazor.Client.Components
@using System.ComponentModel.DataAnnotations

@attribute [Authorize]

<PageTitle>Course Overview</PageTitle>
<div class="row mb-1">
    <h3>Kursöversikt</h3>
</div>

@if (course == null)
{
    <p>Laddar kurs...</p>
}
else
{
    <div class="row">
        <div class="col-lg-6 col-mb-6 col-sm-12">
            <div class="card mb-4">
                <div class="card-header">
                    <div class="d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">Nuvarande kurs</h5>
                        <div>
                            <h6>Filer</h6>
                            <ul>
                                @if (userFiles != null && userFiles.Any())
                                {
                                    @foreach (var file in userFiles)
                                    {
                                        <li>
                                            @file.Name
                                            <button class="btn btn-link" @onclick="() => DownloadFile(file.UserFileId)">Ladda ner</button>
                                        </li>
                                    }
                                }
                                else
                                {
                                    <li>Filer saknas.</li>
                                }
                            </ul>

                            <h6>Ladda upp fil. (Max 10 MB)</h6>
                            <InputFile OnChange="HandleFileUpload" MaxFileSize="10485760" />
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    @* <p class="card-text"></p> *@
                    <div class="table-responsive scrollable-container">
                        <table class="table table-hover ">
                            <tbody>
                                <tr>
                                    <th scope="row">@GetDisplayName(nameof(CourseData.Name))</th>
                                    <td>@CourseData.Name</td>
                                </tr>
                                <tr>
                                    <th scope="row">@GetDisplayName(nameof(CourseData.Description))</th>
                                    <td>@CourseData.Description</td>
                                </tr>
                                <tr>
                                    <th scope="row">@GetDisplayName(nameof(CourseData.StartDate))</th>
                                    <td>@CourseData.StartDate</td>
                                </tr>
                                <tr>
                                    <th scope="row">@GetDisplayName(nameof(CourseData.EndDate))</th>
                                    <td>@CourseData.EndDate</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>

}



@code {
    [Inject]
    private IApiService _apiService { get; set; } = default!;
    [Inject]
    private AuthenticationStateProvider AuthenticationStateProvider { get; set; } = default!;
    [Inject]
    private IJSRuntime JSRuntime { get; set; }
    private List<UserFileReadDto>? userFiles = new();
    private CourseDto? course { get; set; }
    private ModuleDto? SelectedModule { get; set; }
    public CourseDto CourseData { get; set; } = new CourseDto();


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                if (_apiService != null)
                {
                    course = await _apiService.GetAsync<CourseDto>("courses/user");
                    CourseData = course;
                    userFiles = await _apiService.GetAsync<List<UserFileReadDto>>($"files/course/{course.CourseId}");
                    // StateHasChanged(); // Trigger UI update after fetching data
                    StateHasChanged();
                }
                else
                {
                    Console.WriteLine("ApiService is not initialized.");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error fetching course: {ex.Message}");
            }
        }
    }

    private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file == null || file.Size == 0)
        {
            Console.Error.WriteLine("No file selected or file is empty.");
            return;
        }

        try
        {
            var response = await _apiService.PostFileAsync("files/upload", file, course.CourseId); 
            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("File uploaded successfully!");
            }
            else
            {
                Console.Error.WriteLine("Failed to upload file.");
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error uploading file: {ex.Message}");
        }
    }

    private async Task DownloadFile(Guid fileId)
    {
        try
        {
            // Fetch the file data from the API
            var response = await _apiService.GetFileAsync($"files/{fileId}");

            if (response.IsSuccessStatusCode)
            {
                var fileContent = await response.Content.ReadAsByteArrayAsync();
                var contentType = response.Content.Headers.ContentType?.ToString() ?? "application/octet-stream";
                var fileName = response.Content.Headers.ContentDisposition?.FileNameStar
                               ?? response.Content.Headers.ContentDisposition?.FileName?.Trim('"')
                               ?? "downloaded_file";

                // Use JavaScript Interop to trigger the file download
                await JSRuntime.InvokeVoidAsync("downloadFile", fileContent, fileName, contentType);
            }
            else
            {
                Console.Error.WriteLine("File not found or unable to download.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error downloading file: {ex.Message}");
        }
    }

    public string GetDisplayName(string propertyName)
    {
        var property = typeof(CourseDto).GetProperty(propertyName);
        if (property != null)
        {
            var displayAttribute = property.GetCustomAttributes(typeof(DisplayAttribute), true)
                                           .FirstOrDefault() as DisplayAttribute;
            if (displayAttribute != null)
            {
                return displayAttribute.Name;
            }
        }
        return propertyName; //If no DisplayAttribute is found, return the property name
    }



}
