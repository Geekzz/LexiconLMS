@page "/edit-module/{moduleId:int}"
@rendermode InteractiveWebAssembly
@using LMS.Blazor.Client.Services
@using LMS.Shared.DTOs.Update
@inject NavigationManager NavigationManager

@if (module == null)
{
    <div class="d-flex w-100 h-100 justify-content-center align-items-center">
        <div class="loader"></div>
    </div>
}
else
{
    <div class="d-flex justify-content-center align-items-center vh-100">
        <div class="col-md-6">
            <div class="card lexicon-rounded p-4">
                <div class="card-body text-center">
                    <h4 class="mb-4">Module id: @ModuleId</h4>

                    <EditForm Model="module" OnValidSubmit="SaveModule">
                        <DataAnnotationsValidator />

                        <div class="form-group mb-4 text-start">
                            <label for="moduleName" class="form-label">Namn</label>
                            <InputText id="moduleName" class="form-control" @bind-Value="module.Name" />
                            <ValidationMessage For="() => module.Name" />
                        </div>

                        <div class="form-group mb-4 text-start">
                            <label for="moduleDescription" class="form-label">Beskrivning</label>
                            <InputTextArea id="moduleDescription" class="form-control" @bind-Value="module.Description" />
                            <ValidationMessage For="() => module.Description" />
                        </div>

                        <div class="form-group mb-4 text-start">
                            <label for="startDate" class="form-label">Start datum</label>
                            <InputDate id="startDate" class="form-control" @bind-Value="module.StartDate" />
                            <ValidationMessage For="() => module.StartDate" />
                        </div>

                        <div class="form-group mb-4 text-start">
                            <label for="endDate" class="form-label">Slut datum</label>
                            <InputDate id="endDate" class="form-control" @bind-Value="module.EndDate" />
                            <ValidationMessage For="() => module.EndDate" />
                        </div>

                        <div class="d-flex justify-content-center">
                            <button type="submit" class="btn lexicon-button button-fontsize">Redigera</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Inject]
    private IApiService _apiService { get; set; } = default!;

    [Parameter]
    public int ModuleId { get; set; }

    private ModuleUpdateDto? module;

    // Fetch module details on render
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                if (_apiService != null)
                {
                    // Fetch the module and map it to ModuleUpdateDto
                    var fetchedModule = await _apiService.GetAsync<ModuleUpdateDto>($"modules/{ModuleId}");
                    module = fetchedModule;
                    StateHasChanged();
                }
                else
                {
                    Console.WriteLine("ApiService is not initialized.");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error while fetching module: {ex.Message}");
            }
        }
    }

    // Save module details
    private async Task SaveModule()
    {
        if (module != null && _apiService != null)
        {
            try
            {
                var updatedModule = await _apiService.PutAsync<ModuleUpdateDto, ModuleUpdateDto>($"modules/{ModuleId}", module);

                if (updatedModule != null) // Check if the module was successfully updated
                {
                    NavigationManager.NavigateTo("/admin");
                }
                else
                {
                    Console.WriteLine("Failed to update the module.");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error while saving module: {ex.Message}");
            }
        }
    }
}
