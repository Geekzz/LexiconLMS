@page "/edit-user"
@page "/edit-user/{targetId}"
@rendermode InteractiveWebAssembly

@using LMS.Blazor.Client.Services
@using LMS.Shared.DTOs.Read
@using LMS.Shared.DTOs.Update
@using Microsoft.AspNetCore.Components.Authorization
@using LMS.Shared.DTOs
@using Microsoft.AspNetCore.Authorization
@using LMS.Blazor.Client.Components.Home

@inject NavigationManager NavigationManager

<PageTitle>Edit User</PageTitle>

@if (user == null)
{
    <div class="d-flex w-100 h-100 justify-content-center align-items-center">
        <div class="loader"></div>
    </div>
}
else
{
    <div class="d-flex justify-content-center align-items-center vh-100">
        <div class="col-md-6">
            <div class="card lexicon-rounded p-4">
                <div class="card-body text-center">
                    <h4 class="mb-4">Användar id: @targetId</h4>

                    <EditForm Model="user" OnValidSubmit="SaveUser">
                        <DataAnnotationsValidator />
                        @if (user.Role == "Student"){
                            <div class="dropwdown-wrapper d-flex flex-column">
                                <div class="form-check">
                                    <input class="form-check-input" type="radio" name="roleNumber" id="roleNumber1" checked @onchange="(() => UpdateRole(1))">
                                    <label class="form-check-label" for="roleNumber1">
                                        Student
                                    </label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input" type="radio" name="roleNumber" id="roleNumber2" @onchange="(() => UpdateRole(2))">
                                    <label class="form-check-label" for="roleNumber2">
                                        Lärare
                                    </label>
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="dropwdown-wrapper d-flex flex-column">
                                <div class="form-check">
                                    <input class="form-check-input" type="radio" name="roleNumber" id="roleNumber1" @onchange="(() => UpdateRole(1))">
                                    <label class="form-check-label" for="roleNumber1">
                                        Student
                                    </label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input" type="radio" name="roleNumber" id="roleNumber2" checked @onchange="(() => UpdateRole(2))">
                                    <label class="form-check-label" for="roleNumber2">
                                        Lärare
                                    </label>
                                </div>
                            </div>
                        }

                        <div class="form-group mb-4 text-start">
                            <label for="userEmail" class="form-label">E-post</label>
                            <InputText id="userEmail" class="form-control" @bind-Value="user.Email" />
                            <ValidationMessage For="() => user.Email" />
                        </div>

                        <div class="form-group mb-4 text-start">
                            <label for="userFirstName" class="form-label">Förnamn</label>
                            <InputText id="userFirstName" class="form-control" @bind-Value="user.FirstName" />
                            <ValidationMessage For="() => user.FirstName" />
                        </div>

                        <div class="form-group mb-4 text-start">
                            <label for="userLastName" class="form-label">Efternamn</label>
                            <InputText id="userLastName" class="form-control" @bind-Value="user.LastName" />
                            <ValidationMessage For="() => user.LastName" />
                        </div>

                        <div class="d-flex justify-content-center">
                            <button type="submit" class="btn lexicon-button button-fontsize">Redigera</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}


@code {
    [Inject]
    private IApiService _apiService { get; set; } = default!;

    [Parameter]
    public string targetId { get; set; } = "";

    private int roleNumber = 0;
    private const string adminRole = "Teacher";
    private const string studentRole = "Student";

    private UserDto? user;
    private UserUpdateDto? updatedUser;

    // Fetch course details on render
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                if (_apiService != null)
                {
                    user = await _apiService.GetAsync<UserDto>($"users/{targetId}");

                    if (user.Role == adminRole)
                    {
                        roleNumber = 2;
                    }
                    else
                    {
                        roleNumber = 1;
                    }

                    StateHasChanged();
                }
                else
                {
                    Console.WriteLine("ApiService is not initialized.");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error while fetching course: {ex.Message}");
            }
        }
    }

    public void UpdateRole(int role)
    {
        if (role == 2)
        {
            roleNumber = 2;
        }
        else
        {
            roleNumber = 1;
        }
    }

    // Save course details
    private async Task SaveUser()
    {
        if (user != null && _apiService != null)
        {
            try
            {
                user.Role = roleNumber == 2 ? adminRole : studentRole;

                updatedUser = await _apiService.PutAsync<UserDto, UserUpdateDto>($"users/{targetId}", user);

                if (updatedUser != null) // Check if the course was successfully updated
                {
                    NavigationManager.NavigateTo("/admin");
                }
                else
                {
                    Console.WriteLine("Failed to update the course.");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error while saving course: {ex.Message}");
            }
        }
    }
}
