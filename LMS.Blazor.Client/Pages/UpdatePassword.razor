@page "/update-password"
@rendermode InteractiveWebAssembly

@using System.ComponentModel.DataAnnotations
@using LMS.Blazor.Client.Services
@using LMS.Shared.DTOs.Update

<PageTitle>Update Password</PageTitle>

<h3>Update Password</h3>

@if (successMessage != null)
{
	<div class="alert alert-success">@successMessage</div>
}

@if (errorMessage != null)
{
	<div class="alert alert-danger">@errorMessage</div>
}

<EditForm Model="passwordModel" OnValidSubmit="HandleValidSubmit">
	<DataAnnotationsValidator />

	<div class="mb-3">
		<label for="currentPassword" class="form-label">Current Password</label>
		<InputText type="password" id="currentPassword" class="form-control" @bind-Value="passwordModel.CurrentPassword" />
		<ValidationMessage For="() => passwordModel.CurrentPassword" />
	</div>

	<div class="mb-3">
		<label for="newPassword" class="form-label">New Password</label>
		<InputText type="password" id="newPassword" class="form-control" @bind-Value="passwordModel.NewPassword" />
		<ValidationMessage For="() => passwordModel.NewPassword" />
	</div>

	<div class="mb-3">
		<label for="confirmPassword" class="form-label">Confirm New Password</label>
		<InputText type="password" id="confirmPassword" class="form-control" @bind-Value="passwordModel.ConfirmPassword" />
		<ValidationMessage For="() => passwordModel.ConfirmPassword" />
	</div>

	<button type="submit" class="btn btn-primary">Update Password</button>
</EditForm>

@code {
	[Inject]
	private IApiService _apiService { get; set; } = default!;

	private PasswordModel passwordModel = new();
	private string? successMessage;
	private string? errorMessage;


	private async Task HandleValidSubmit()
	{
		errorMessage = null;
		successMessage = null;

		if (passwordModel.NewPassword != passwordModel.ConfirmPassword)
		{
			errorMessage = "New password and confirm password do not match.";
			return;
		}

		// Simulate password update (replace with actual service call in production)
		var passwordUpdateDto = new PasswordUpdateDto()
			{
				CurrentPassword = passwordModel.CurrentPassword,
				NewPassword = passwordModel.NewPassword
			};

		bool isUpdated = await _apiService.CallApiGetAsync<bool>($"/account/updatePassword");


	if (isUpdated)
		{
			successMessage = "Your password has been updated successfully.";
		}
		else
		{
			errorMessage = "Failed to update password. Please try again.";
		}
	}

	public class PasswordModel
	{
		[Required(ErrorMessage = "Current password is required.")]
		public string CurrentPassword { get; set; } = string.Empty;

		[Required(ErrorMessage = "New password is required.")]
		[MinLength(6, ErrorMessage = "New password must be at least 6 characters long.")]
		public string NewPassword { get; set; } = string.Empty;

		[Required(ErrorMessage = "Confirm password is required.")]
		public string ConfirmPassword { get; set; } = string.Empty;
	}
}
