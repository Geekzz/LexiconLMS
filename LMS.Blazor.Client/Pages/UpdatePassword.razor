	@page "/account/update-password"
	@rendermode InteractiveWebAssembly

	@using System.ComponentModel.DataAnnotations
	@using LMS.Blazor.Client.Services
	@using LMS.Shared.DTOs.Update

<PageTitle>Update Password</PageTitle>


<div class="no-padding container-fluid w-100 h-100 d-flex justify-content-center align-items-center">
	<div class="lexicon-primary px-4 py-5 m-4 d-flex justify-content-center align-items-center flex-column lexicon-rounded-large col-md-6">
		<h1 class="px-2">BYT LÖSENORD</h1>
		<div class="row d-flex justify-content-center align-items-center col-md-10">
			<div class="col-md-8">
				<section>
					<EditForm Model="passwordModel" OnValidSubmit="HandleValidSubmit">
						<DataAnnotationsValidator />
						<hr />
						<div class="mb-3">
							<label for="currentPassword" class="form-label">Nuvarande Lösenord</label>
							<InputText type="password" id="currentPassword" class="form-control" @bind-Value="passwordModel.CurrentPassword" />
							<ValidationMessage For="() => passwordModel.CurrentPassword" />
						</div>

						<div class="mb-3">
							<label for="newPassword" class="form-label">Nytt Lösenord</label>
							<InputText type="password" id="newPassword" class="form-control" @bind-Value="passwordModel.NewPassword" />
							<ValidationMessage For="() => passwordModel.NewPassword" />
						</div>

						<div class="mb-3">
							<label for="confirmPassword" class="form-label">Bekräfta Lösenord</label>
							<InputText type="password" id="confirmPassword" class="form-control" @bind-Value="passwordModel.ConfirmPassword" />
							<ValidationMessage For="() => passwordModel.ConfirmPassword" />
						</div>

						<button type="submit" class="btn w-100 lexicon-button lexicon-button-special button-fontsize">UPPDATERA</button>
					</EditForm>
					@if (successMessage != null)
					{
						<br />
						<div class="alert alert-success">@successMessage</div>
					}

					@if (errorMessage != null)
					{
						<br />
						<div class="alert alert-danger">@errorMessage</div>
					}
				</section>
			</div>
		</div>
	</div>
</div>



@code {
	[Inject]
	private IApiService _apiService { get; set; } = default!;

	private PasswordModel passwordModel = new();
	private string? successMessage;
	private string? errorMessage;
	private bool isUpdated = false;

	private async Task HandleValidSubmit()
	{
		errorMessage = null;
		successMessage = null;

		if (passwordModel.NewPassword != passwordModel.ConfirmPassword)
		{
			errorMessage = "Nytt lösenord och bekräftande lösenord stämmer inte överens.";
			return;
		}

		var passwordUpdateDto = new PasswordUpdateDto()
			{
				CurrentPassword = passwordModel.CurrentPassword,
				NewPassword = passwordModel.NewPassword
			};

		isUpdated = await _apiService.PutAsync<PasswordUpdateDto>($"account/updatePassword", passwordUpdateDto);

		if (isUpdated)
		{
			successMessage = "Uppdatering av lösenord lyckades.";
			passwordModel = new PasswordModel();
			StateHasChanged();
		}
		else
		{
			errorMessage = "Uppdatering av lösenord misslyckades.";
		}
	}

	private class PasswordModel
	{
		[Required(ErrorMessage = "Nuvarande lösenord krävs.")]
		public string CurrentPassword { get; set; } = string.Empty;

		[Required(ErrorMessage = "Nytt lösenord krävs.")]
		[MinLength(6, ErrorMessage = "Nytt lösenord måste vara minst 6 tecken långt.")]
		public string NewPassword { get; set; } = string.Empty;

		[Required(ErrorMessage = "Bekräfta lösenord krävs.")]
		public string ConfirmPassword { get; set; } = string.Empty;
	}
}
