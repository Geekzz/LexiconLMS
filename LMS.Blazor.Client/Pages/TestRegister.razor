@page "/register"
@rendermode InteractiveWebAssembly

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using LMS.Blazor.Client.Services
@using LMS.Shared.DTOs.Create
@using LMS.Shared.DTOs.Read
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity

@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager

<PageTitle>Registrera</PageTitle>

@if (courses == null)
{
    <div class="d-flex w-100 h-100 justify-content-center align-items-center">
        <div class="loader"></div>
    </div>
}
else
{
    <div class="no-padding container-fluid w-100 h-100 d-flex justify-content-center align-items-center">
        <div class="lexicon-primary px-4 py-5 m-4 d-flex justify-content-center align-items-center flex-column lexicon-rounded-large col-md-6">
            <h1 class="px-2">REGISTRERA</h1>
            <div class="row d-flex justify-content-center align-items-center col-md-10">
                <div class="col-md-8">
                    <section>
                        <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
                            <DataAnnotationsValidator />
                            <hr />
                            <ValidationSummary class="text-danger" role="alert" />
                            <div class="dropwdown-wrapper d-flex">
                                <select class="form-select" aria-label="Select Course" @bind="Input.SecondDropdown">
                                    <option selected>Välj kurs...</option>
                                    @foreach (var course in courses)
                                    {
                                        <option value="@course.CourseId">@course.Name</option>
                                    }
                                </select>
                                @* @if (courses != null)
                                {
                                    <div class="dropdown">
                                        <button class="btn btn-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                            @SecondDropdown
                                        </button>
                                        <ul class="dropdown-menu">
                                            @foreach (var course in courses)
                                            {
                                                <li><a value="@course.CourseId" class="dropdown-item" onclick="SetCourse()">@course.Name</a></li>
                                            }
                                        </ul>
                                    </div>
                                } *@
                            </div>
                            <div class="form-floating mb-3">
                                <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                                <label for="email">E-post</label>
                                <ValidationMessage For="() => Input.Email" class="text-danger" />
                            </div>
                            <div class="form-floating mb-3">
                                <InputText @bind-Value="Input.FirstName" class="form-control" autocomplete="given-name" aria-required="true" placeholder="First Name" />
                                <label for="FirstName">Förnamn</label>
                                @* <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" /> *@
                            </div>
                            <div class="form-floating mb-3">
                                <InputText @bind-Value="Input.LastName" class="form-control" autocomplete="family-name" aria-required="true" placeholder="Last Name" />
                                <label for="LastName">Efternamn</label>
                                @* <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" /> *@
                            </div>
                            <div class="form-floating mb-3">
                                <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                                <label for="password">Lösenord</label>
                                <ValidationMessage For="() => Input.Password" class="text-danger" />
                            </div>
                            <div class="form-floating mb-3">
                                <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                                <label for="confirm-password">Upprepa Lösenord</label>
                                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
                            </div>
                            <button type="submit" class="btn w-100 lexicon-button lexicon-button-special button-fontsize">REGISTRERA</button>
                        </EditForm>
                    </section>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();
    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    [Inject]
    private IApiService _apiService { get; set; } = default!;
    [Inject]
    private AuthenticationStateProvider AuthenticationStateProvider { get; set; } = default!;

    private List<CourseDto>? courses;

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (_apiService != null)
            {
                courses = (await _apiService.GetAsync<List<CourseDto>>("courses")).ToList();
                StateHasChanged(); // Trigger UI update after fetching data
            }
            else
            {
                Console.WriteLine("ApiService is not initialized.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching course: {ex.Message}");
        }
    }

    public async Task RegisterUser(EditContext editContext)
    {
        var httpClient = HttpClientFactory.CreateClient("LmsAPIClient");

        var registerDto = new UserForRegistrationDto { 
            CourseId = Input.SecondDropdown,
            Email = Input.Email, 
            Password = Input.Password, 
            UserName = Input.Email, 
            FirstName = Input.FirstName, 
            LastName = Input.LastName 
        };

        // var response = await httpClient.PostAsJsonAsync("https://localhost:7044/api/auth/register", registerDto);

        try
        {
            registerDto = await _apiService.PostAsync<UserForRegistrationDto>("api/auth/register");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }

        // var user = CreateUser();

        // await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        // var emailStore = GetEmailStore();
        // await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        // var result = await UserManager.CreateAsync(user, Input.Password);

        // if (!result.Succeeded)
        // {
        //     identityErrors = result.Errors;
        //     return;
        // }

        // Logger.LogInformation("User created a new account with password.");

        // var userId = await UserManager.GetUserIdAsync(user);
        // var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        // code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        // var callbackUrl = NavigationManager.GetUriWithQueryParameters(
        //     NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
        //     new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        // await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        // if (UserManager.Options.SignIn.RequireConfirmedAccount)
        // {
        //     RedirectManager.RedirectTo(
        //         "Account/RegisterConfirmation",
        //         new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        // }

        // await SignInManager.SignInAsync(user, isPersistent: false);
        NavigationManager.NavigateTo("/register-user-complete");
    }

    private sealed class InputModel
    {
        public int SecondDropdown { get; set; }
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Display(Name = "First Name")]
        public string FirstName { get; set; } = "";

        [Display(Name = "Last Name")]
        public string LastName { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}
